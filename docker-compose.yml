version: "3.7"

services:
  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./bot:/app/bot
    depends_on:
      - postgres
      - redis
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health') if True else exit(1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:14-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-shardbot}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-md5}
    command: postgres -c ssl=off
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT_FORWARD:-15432}:5432"
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT_FORWARD:-16379}:6379"
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./bot:/app/bot
      - ./web/server:/app/web/server
    depends_on:
      - postgres
      - redis
    ports:
      - "${DASHBOARD_PORT:-8080}:8080"
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 20s
      timeout: 5s
      retries: 3
    command: python -m web.server.app

  web:
    build:
      context: ./web/client
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api
    ports:
      - "4000:80"
    depends_on:
      - api
    networks:
      - bot_network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME_NAME:-shard_bot_postgres_data}
  redis_data:
    name: ${REDIS_VOLUME_NAME:-shard_bot_redis_data}

networks:
  bot_network:
    name: ${NETWORK_NAME:-shard_bot_network}
    driver: bridge
