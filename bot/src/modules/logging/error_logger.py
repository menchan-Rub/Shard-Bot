import discord
from discord.ext import commands
import traceback
import sys
from typing import Optional, Dict, Any, List
from datetime import datetime
import platform
import io
import os
import json
import asyncio
from collections import defaultdict, Counter

class ErrorLogger:
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.error_history = defaultdict(list)  # сѓесЃЕсЃ╝т▒ЦТГ┤сЂ«У┐йУиАуће
        self.error_counter = Counter()  # сѓесЃЕсЃ╝сѓ┐сѓцсЃЌсЂ«сѓФсѓдсЃ│сЃѕ
        self.error_limit = 10  # сѓесЃЕсЃ╝жђџуЪЦсЂ«жќЙтђц
        self.error_cooldown = 3600  # сѓесЃЕсЃ╝жђџуЪЦсѓ»сЃ╝сЃФсЃђсѓдсЃ│№╝ѕуДњ№╝Ѕ
        self.last_notification = {}  # ТюђтЙїсЂ«жђџуЪЦТЎѓжќЊ
        
    async def get_error_channel(self, guild: Optional[discord.Guild] = None) -> Optional[discord.TextChannel]:
        """сѓесЃЕсЃ╝сЃГсѓ░ућесЂ«сЃЂсЃБсЃ│сЃЇсЃФсѓњтЈќтЙЌ"""
        try:
            if guild:
                # сѓ«сЃФсЃЅтЏ║ТюЅсЂ«сѓесЃЕсЃ╝сЃЂсЃБсЃ│сЃЇсЃФсѓњтЈќтЙЌ
                async with self.bot.db.acquire() as conn:
                    result = await conn.fetchval(
                        "SELECT error_log_channel_id FROM guilds WHERE id = $1",
                        guild.id
                    )
                    if result:
                        return self.bot.get_channel(result)
            
            # сѓ░сЃГсЃ╝сЃљсЃФсѓесЃЕсЃ╝сЃЂсЃБсЃ│сЃЇсЃФсѓњтЈќтЙЌ№╝ѕжќІуЎ║УђЁуће№╝Ѕ
            error_channel_id = getattr(self.bot, 'error_channel_id', None)
            if error_channel_id:
                return self.bot.get_channel(error_channel_id)
                
            # configсЂІсѓЅтЈќтЙЌсѓњУЕдсЂ┐сѓІ
            try:
                from config import get_config
                config = get_config()
                error_channel_id = config.get('bot', {}).get('error_log_channel_id')
                if error_channel_id:
                    return self.bot.get_channel(int(error_channel_id))
            except:
                pass
                
            return None
        except Exception:
            return None
            
    async def get_admin_users(self) -> List[discord.User]:
        """у«АуљєУђЁсЃдсЃ╝сѓХсЃ╝сЂ«сЃфсѓ╣сЃѕсѓњтЈќтЙЌ"""
        admin_users = []
        try:
            from config import get_config
            config = get_config()
            owner_ids = config.get('bot', {}).get('owner_ids', [])
            
            for owner_id in owner_ids:
                try:
                    user = await self.bot.fetch_user(owner_id)
                    if user:
                        admin_users.append(user)
                except:
                    pass
        except:
            pass
            
        return admin_users

    def create_error_embed(
        self,
        error: Exception,
        command: Optional[str] = None,
        guild: Optional[discord.Guild] = None,
        user: Optional[discord.User] = None
    ) -> discord.Embed:
        """сѓесЃЕсЃ╝ТЃЁта▒сѓњтљФсѓђтЪІсѓЂУЙ╝сЂ┐сЃАсЃЃсѓ╗сЃ╝сѓИсѓњСйюТѕљ"""
        
        # сѓесЃЕсЃ╝сЃѕсЃгсЃ╝сѓ╣сЃљсЃЃсѓ»сЂ«тЈќтЙЌ
        tb = ''.join(traceback.format_exception(type(error), error, error.__traceback__))
        
        # тЪ║ТюгуџёсЂфсѓисѓ╣сЃєсЃаТЃЁта▒
        system_info = (
            f"Python: {sys.version}\n"
            f"OS: {platform.system()} {platform.release()}\n"
            f"Discord.py: {discord.__version__}\n"
            f"Memory: {self.get_memory_usage()}"
        )
        
        # сѓесЃЕсЃ╝уЎ║ућЪТЎѓсЂ«УЕ│у┤░ТЃЁта▒
        timestamp = datetime.utcnow()
        
        embed = discord.Embed(
            title="Рџа№ИЈ сѓесЃЕсЃ╝сЂїуЎ║ућЪсЂЌсЂЙсЂЌсЂЪ",
            description=f"```py\n{str(error)}```",
            color=discord.Color.red(),
            timestamp=timestamp
        )
        
        # сѓ│сЃъсЃ│сЃЅТЃЁта▒
        if command:
            embed.add_field(
                name="сѓ│сЃъсЃ│сЃЅ",
                value=f"```{command}```",
                inline=False
            )
        
        # сѓесЃЕсЃ╝УЕ│у┤░
        if len(tb) > 1024:
            # жЋисЂЎсЂјсѓІта┤тљѕсЂ»тѕєтЅ▓
            parts = [tb[i:i + 1024] for i in range(0, len(tb), 1024)]
            for i, part in enumerate(parts, 1):
                embed.add_field(
                    name=f"сЃѕсЃгсЃ╝сѓ╣сЃљсЃЃсѓ» ({i}/{len(parts)})",
                    value=f"```py\n{part}```",
                    inline=False
                )
        else:
            embed.add_field(
                name="сЃѕсЃгсЃ╝сѓ╣сЃљсЃЃсѓ»",
                value=f"```py\n{tb}```",
                inline=False
            )
        
        # уЎ║ућЪта┤ТЅђсЂ«ТЃЁта▒
        location_info = []
        if guild:
            location_info.append(f"сѓхсЃ╝сЃљсЃ╝: {guild.name} (ID: {guild.id})")
        if user:
            location_info.append(f"сЃдсЃ╝сѓХсЃ╝: {user} (ID: {user.id})")
        
        if location_info:
            embed.add_field(
                name="уЎ║ућЪта┤ТЅђ",
                value="\n".join(location_info),
                inline=False
            )
        
        # сѓисѓ╣сЃєсЃаТЃЁта▒
        embed.add_field(
            name="сѓисѓ╣сЃєсЃаТЃЁта▒",
            value=f"```\n{system_info}```",
            inline=False
        )
        
        # сѓесЃЕсЃ╝жа╗т║д
        error_type = type(error).__name__
        error_count = self.error_counter[error_type]
        embed.add_field(
            name="сѓесЃЕсЃ╝ух▒Уеѕ",
            value=f"сЂЊсЂ«сѓ┐сѓцсЃЌсЂ«сѓесЃЕсЃ╝уЎ║ућЪтЏъТЋ░: {error_count}тЏъ",
            inline=False
        )
        
        return embed
        
    def get_memory_usage(self) -> str:
        """уЈЙтюесЂ«сЃАсЃбсЃфСй┐ућежЄЈсѓњтЈќтЙЌ"""
        try:
            import psutil
            process = psutil.Process(os.getpid())
            memory_info = process.memory_info()
            return f"{memory_info.rss / 1024 / 1024:.2f} MB"
        except:
            return "СИЇТўј"

    async def log_error(
        self,
        error: Exception,
        command: Optional[str] = None,
        guild: Optional[discord.Guild] = None,
        user: Optional[discord.User] = None
    ) -> None:
        """сѓесЃЕсЃ╝сѓњсЃГсѓ░сЃЂсЃБсЃ│сЃЇсЃФсЂФжђЂС┐АсЂЌсђЂт┐ЁУдЂсЂФт┐юсЂўсЂджђџуЪЦ"""
        try:
            # сѓесЃЕсЃ╝ух▒УеѕсЂ«ТЏ┤Тќ░
            error_type = type(error).__name__
            self.error_counter[error_type] += 1
            
            # сѓесЃЕсЃ╝т▒ЦТГ┤сЂ«ТЏ┤Тќ░
            error_info = {
                'timestamp': datetime.utcnow().isoformat(),
                'error_type': error_type,
                'error_msg': str(error),
                'command': command,
                'guild_id': guild.id if guild else None,
                'guild_name': guild.name if guild else None,
                'user_id': user.id if user else None,
                'user_name': str(user) if user else None
            }
            self.error_history[error_type].append(error_info)
            
            # сѓесЃЕсЃ╝сЃГсѓ░сЃЂсЃБсЃ│сЃЇсЃФсЂФжђЂС┐А
            channel = await self.get_error_channel(guild)
            if channel:
                embed = self.create_error_embed(error, command, guild, user)
                await channel.send(embed=embed)
                
                # сѓесЃЕсЃ╝сЂ«УЕ│у┤░сЂїжЋисЂёта┤тљѕсЂ»сЃЋсѓАсѓцсЃФсЂесЂЌсЂдсѓѓжђЂС┐А
                tb = ''.join(traceback.format_exception(type(error), error, error.__traceback__))
                if len(tb) > 2000:
                    file_content = (
                        f"Error: {error_type}\n"
                        f"Message: {str(error)}\n"
                        f"Command: {command}\n"
                        f"Guild: {guild.name if guild else 'N/A'} (ID: {guild.id if guild else 'N/A'})\n"
                        f"User: {str(user) if user else 'N/A'} (ID: {user.id if user else 'N/A'})\n"
                        f"Timestamp: {datetime.utcnow().isoformat()}\n\n"
                        f"Traceback:\n{tb}"
                    )
                    file = discord.File(
                        io.StringIO(file_content),
                        filename=f"error_{error_type}_{int(datetime.utcnow().timestamp())}.txt"
                    )
                    await channel.send(file=file)
            
            # жЄЇтцДсЂфсѓесЃЕсЃ╝сЂїжа╗уЎ║сЂЌсЂдсЂёсѓІта┤тљѕсЂ»у«АуљєУђЁсЂФжђџуЪЦ
            await self.notify_admins_if_needed(error_type, error)
            
            # сѓесЃЕсЃ╝т▒ЦТГ┤сѓњт«џТюЪуџёсЂФС┐ЮтГў
            await self.save_error_history()
            
        except Exception as e:
            print(f"сѓесЃЕсЃ╝сЃГсѓ░сЂ«жђЂС┐АсЂФтц▒ТЋЌсЂЌсЂЙсЂЌсЂЪ: {e}")
            traceback.print_exc()
            
    async def notify_admins_if_needed(self, error_type: str, error: Exception) -> None:
        """жЄЇтцДсЂфсѓесЃЕсЃ╝сЂїжа╗уЎ║сЂЌсЂдсЂёсѓІта┤тљѕсЂФу«АуљєУђЁсЂФжђџуЪЦ"""
        try:
            # сѓесЃЕсЃ╝сЂ«жќЙтђцсѓњУХЁсЂѕсЂдсЂёсѓІсЂІуб║УфЇ
            if self.error_counter[error_type] < self.error_limit:
                return
                
            # сѓ»сЃ╝сЃФсЃђсѓдсЃ│ТюЪжќЊСИГсЂфсѓЅжђџуЪЦсЂЌсЂфсЂё
            now = datetime.utcnow().timestamp()
            if error_type in self.last_notification and now - self.last_notification[error_type] < self.error_cooldown:
                return
                
            # у«АуљєУђЁсЂФжђџуЪЦ
            admin_users = await self.get_admin_users()
            for admin in admin_users:
                try:
                    embed = discord.Embed(
                        title="­Ъџе жЄЇтцДсЂфсѓесЃЕсЃ╝сЂїжа╗уЎ║сЂЌсЂдсЂёсЂЙсЂЎ",
                        description=f"сѓесЃЕсЃ╝сѓ┐сѓцсЃЌ `{error_type}` сЂїжќЙтђц№╝ѕ{self.error_limit}тЏъ№╝ЅсѓњУХЁсЂѕсЂдуЎ║ућЪсЂЌсЂдсЂёсЂЙсЂЎсђѓ",
                        color=discord.Color.dark_red()
                    )
                    embed.add_field(
                        name="сѓесЃЕсЃ╝сЃАсЃЃсѓ╗сЃ╝сѓИ",
                        value=f"```{str(error)}```",
                        inline=False
                    )
                    embed.add_field(
                        name="уЎ║ућЪтЏъТЋ░",
                        value=f"{self.error_counter[error_type]}тЏъ",
                        inline=True
                    )
                    embed.add_field(
                        name="ТюђухѓуЎ║ућЪ",
                        value=f"<t:{int(now)}:R>",
                        inline=True
                    )
                    await admin.send(embed=embed)
                except:
                    pass
                    
            # ТюђтЙїсЂ«жђџуЪЦТЎѓжќЊсѓњТЏ┤Тќ░
            self.last_notification[error_type] = now
        except:
            pass
            
    async def save_error_history(self) -> None:
        """сѓесЃЕсЃ╝т▒ЦТГ┤сѓњJSONсЃЋсѓАсѓцсЃФсЂФС┐ЮтГў"""
        try:
            # С┐ЮтГўтЁѕсЃЄсѓБсЃгсѓ»сЃѕсЃфсЂ«уб║УфЇ
            logs_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'logs')
            os.makedirs(logs_dir, exist_ok=True)
            
            # сѓесЃЕсЃ╝т▒ЦТГ┤сѓњJSONсЂФтцЅТЈЏ
            error_data = {
                'last_updated': datetime.utcnow().isoformat(),
                'error_counts': dict(self.error_counter),
                'error_history': {k: v[-100:] for k, v in self.error_history.items()}  # тљёсѓ┐сѓцсЃЌсЂ«ТюђТќ░100С╗ХсЂ«сЂ┐С┐ЮтГў
            }
            
            # сЃЋсѓАсѓцсЃФсЂФС┐ЮтГў
            filename = os.path.join(logs_dir, 'error_history.json')
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(error_data, f, ensure_ascii=False, indent=2)
        except:
            pass
            
    async def analyze_errors(self) -> discord.Embed:
        """сѓесЃЕсЃ╝тѕєТъљсЃгсЃЮсЃ╝сЃѕсѓњућЪТѕљ"""
        embed = discord.Embed(
            title="­ЪЊі сѓесЃЕсЃ╝тѕєТъљсЃгсЃЮсЃ╝сЃѕ",
            description="уЏ┤У┐ЉсЂ«сѓесЃЕсЃ╝ух▒УеѕсЂетѕєТъљ",
            color=discord.Color.blue(),
            timestamp=datetime.utcnow()
        )
        
        # сѓесЃЕсЃ╝сѓ┐сѓцсЃЌтѕЦсЂ«уЎ║ућЪтЏъТЋ░
        top_errors = self.error_counter.most_common(5)
        if top_errors:
            error_stats = "\n".join([f"{error_type}: {count}тЏъ" for error_type, count in top_errors])
            embed.add_field(
                name="ТюђсѓѓтцџсЂёсѓесЃЕсЃ╝№╝ѕСИіСйЇ5С╗Х№╝Ѕ",
                value=f"```{error_stats}```",
                inline=False
            )
        else:
            embed.add_field(
                name="ТюђсѓѓтцџсЂёсѓесЃЕсЃ╝",
                value="сѓесЃЕсЃ╝сЂ»Уеўжї▓сЂЋсѓїсЂдсЂёсЂЙсЂЏсѓЊ",
                inline=False
            )
            
        # тЁеСйЊсЂ«сѓесЃЕсЃ╝ТЋ░
        total_errors = sum(self.error_counter.values())
        embed.add_field(
            name="уиЈсѓесЃЕсЃ╝ТЋ░",
            value=f"{total_errors}тЏъ",
            inline=True
        )
        
        # сѓесЃЕсЃ╝сѓ┐сѓцсЃЌсЂ«ТЋ░
        embed.add_field(
            name="сѓесЃЕсЃ╝сѓ┐сѓцсЃЌТЋ░",
            value=f"{len(self.error_counter)}уе«жАъ",
            inline=True
        )
        
        return embed 